To achieve this, we will need several files and modules. Here's a list of the core classes, functions, methods that will be necessary, along with a quick comment on their purpose:

1. `server.js`: This is the entry point of the application. It sets up the Express server and includes middleware for error handling and parsing JSON requests.

2. `routes/index.js`: This file is responsible for defining the public and private API routes.

3. `controllers/productController.js`: This file contains the logic for handling product-related requests.

4. `controllers/userController.js`: This file contains the logic for handling user-related requests, including authentication and order management.

5. `controllers/adminController.js`: This file contains the logic for handling admin-related requests.

6. `middlewares/authMiddleware.js`: This file contains the middleware for JWT authentication.

7. `models/Product.js`: This file defines the Product model.

8. `models/User.js`: This file defines the User model.

9. `models/Order.js`: This file defines the Order model.

10. `package.json`: This file contains the list of project dependencies.

Let's start with the `package.json` file:

package.json
```
{
  "name": "api-server",
  "version": "1.0.0",
  "description": "API server for e-commerce application",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.17.1",
    "jsonwebtoken": "^8.5.1",
    "mongoose": "^5.12.3"
  }
}
```

Next, let's create the `server.js` file:

server.js
```
const express = require('express');
const mongoose = require('mongoose');
const routes = require('./routes');

const app = express();

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/api-server', { useNewUrlParser: true, useUnifiedTopology: true });

app.use(express.json());

// Use routes
app.use('/api', routes);

// Start server
const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`Server running on port ${port}`));
```

Next, let's create the `routes/index.js` file:

routes/index.js
```
const express = require('express');
const productController = require('../controllers/productController');
const userController = require('../controllers/userController');
const adminController = require('../controllers/adminController');
const authMiddleware = require('../middlewares/authMiddleware');

const router = express.Router();

// Public routes
router.get('/products', productController.getAllProducts);
router.get('/products/:id', productController.getProductById);

// Private routes
router.post('/login', userController.login);
router.post('/orders', authMiddleware, userController.createOrder);
router.get('/orders', authMiddleware, userController.getOrders);

// Admin routes
router.post('/products', authMiddleware, adminController.createProduct);
router.put('/products/:id', authMiddleware, adminController.updateProduct);
router.delete('/products/:id', authMiddleware, adminController.deleteProduct);

module.exports = router;
```

Next, let's create the `controllers/productController.js`, `controllers/userController.js`, `controllers/adminController.js`, `middlewares/authMiddleware.js`, `models/Product.js`, `models/User.js`, and `models/Order.js` files. These files will contain the logic for handling requests and interacting with the database.

controllers/productController.js
```
const Product = require('../models/Product');

exports.getAllProducts = async (req, res) => {
  const products = await Product.find({});
  res.json(products);
};

exports.getProductById = async (req, res) => {
  const product = await Product.findById(req.params.id);
  res.json(product);
};
```

controllers/userController.js
```
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const Order = require('../models/Order');

exports.login = async (req, res) => {
  const user = await User.findOne({ email: req.body.email });
  if (!user) return res.status(400).send('Invalid email or password.');

  const token = jwt.sign({ _id: user._id, isAdmin: user.isAdmin }, 'jwtPrivateKey');
  res.send(token);
};

exports.createOrder = async (req, res) => {
  const order = new Order(req.body);
  await order.save();
  res.send(order);
};

exports.getOrders = async (req, res) => {
  const orders = await Order.find({ userId: req.user._id });
  res.send(orders);
};
```

controllers/adminController.js
```
const Product = require('../models/Product');

exports.createProduct = async (req, res) => {
  const product = new Product(req.body);
  await product.save();
  res.send(product);
};

exports.updateProduct = async (req, res) => {
  const product = await Product.findByIdAndUpdate(req.params.id, req.body, { new: true });
  res.send(product);
};

exports.deleteProduct = async (req, res) => {
  await Product.findByIdAndRemove(req.params.id);
  res.send('Product deleted.');
};
```

middlewares/authMiddleware.js
```
const jwt = require('jsonwebtoken');

module.exports = function (req, res, next) {
  const token = req.header('x-auth-token');
  if (!token) return res.status(401).send('Access denied. No token provided.');

  try {
    const decoded = jwt.verify(token, 'jwtPrivateKey');
    req.user = decoded;
    next();
  } catch (ex) {
    res.status(400).send('Invalid token.');
  }
};
```

models/Product.js
```
const mongoose = require('mongoose');

const ProductSchema = new mongoose.Schema({
  name: String,
  price: Number,
  description: String
});

module.exports = mongoose.model('Product', ProductSchema);
```

models/User.js
```
const mongoose = require('mongoose');

const UserSchema = new mongoose.Schema({
  name: String,
  email: String,
  password: String,
  isAdmin: Boolean
});

module.exports = mongoose.model('User', UserSchema);
```

models/Order.js
```
const mongoose = require('mongoose');

const OrderSchema = new mongoose.Schema({
  userId: mongoose.Schema.Types.ObjectId,
  products: [mongoose.Schema.Types.ObjectId]
});

module.exports = mongoose.model('Order', OrderSchema);
```

This concludes a fully working implementation.